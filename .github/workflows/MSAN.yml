name: Sanitizers

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest]
        # os: [macos-latest]
        std: [17]
        cc: [clang]
        cxx: [clang++]
        build_type: [MSAN] # MSAN not supported by macos

    steps:
    - uses: actions/checkout@v2
    
    - name: Build std lib
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        CFLAGS: -fsanitize=memory -fsanitize-recover -fsanitize-blacklist=${{github.workspace}}/msan.blacklist -fno-optimize-sibling-calls -fsanitize-memory-track-origins=2 -fno-omit-frame-pointer -g -O2

      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        # # clone LLVM
        git clone --depth 1 https://github.com/llvm/llvm-project.git -b llvmorg-9.0.1 \
        && cd llvm-project \
        && cp -r libcxx llvm/projects/ \
        && cp -r libcxxabi llvm/projects/ \
        && mkdir ${{github.workspace}}/libcxx_msan \
        && cd ${{github.workspace}}/libcxx_msan \
        && cmake ../llvm-project/llvm -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++ -DLLVM_USE_SANITIZER=MemoryWithOrigins -DCMAKE_C_FLAGS="$CFLAGS" -DCMAKE_CXX_FLAGS="$CFLAGS" \
        && make cxx -j4

    - name: Configure CMake
      env:
        CC: ${{ matrix.cc }}
        CXX: ${{ matrix.cxx }}
        MSAN_CFLAGS: -stdlib=libc++ -I${{github.workspace}}/llvm-project/libcxx/include -I${{github.workspace}}/llvm-project/libcxxabi/include

      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} -DCMAKE_CXX_STANDARD=${{matrix.std}} -DCMAKE_C_FLAGS="$MSAN_CFLAGS" -DCMAKE_CXX_FLAGS="$MSAN_CFLAGS" 

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{ matrix.build_type }} -v --parallel 4

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.  
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --output-on-failure -C ${{ matrix.build_type }}
      
